1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

- sort commands.js returns the file sorted alphabetically by line.

           done(data);
           if (err) throw err;
       break;
       commandLibrary.cat(userInputArray.slice(1));
       const fileName = fullPath[0];
       fs.readFile(fileName, (err, data) => {
       });
      //we will add the functionality of echo next within the object commandLibrary
      break;
      case "cat":
      commandLibrary.echo(userInputArray.slice(1).join(" "));
    case "echo":
    done(userInput);
   }
  "cat": function(fullPath) {
  "echo": function(userInput) {
  //parses the user input to understand which command was typed
  //the cat command
  //the echo command
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  process.stdout.write('\nprompt > ');
  process.stdout.write(output);
  switch (command) {
  }
  },
//where we will store our commands
//where we will store the logic of our commands
//write out data
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
}
};



 - wc commands.js prints newline, word, and byte counts for the commands.js

 43     119    1097 commands.js




 - uniq commands.js sorts each line and returns unique lines only, any repeated lines are removed.

 const fs = require("fs");

//write out data
function done(output) {
  process.stdout.write(output);
  process.stdout.write('\nprompt > ');
}

//where we will store our commands
function evaluateCmd(userInput) {
  //parses the user input to understand which command was typed
  const userInputArray = userInput.split(" ");
  const command = userInputArray[0];

  switch (command) {
    case "echo":
      //we will add the functionality of echo next within the object commandLibrary
      commandLibrary.echo(userInputArray.slice(1).join(" "));
      break;
      case "cat":
       commandLibrary.cat(userInputArray.slice(1));
       break;
  }
}

//where we will store the logic of our commands
const commandLibrary = {
  //the echo command
  "echo": function(userInput) {
    done(userInput);
  },
  //the cat command
  "cat": function(fullPath) {
       const fileName = fullPath[0];
       fs.readFile(fileName, (err, data) => {
           if (err) throw err;
           done(data);
       });
   }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;



2.Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

head commands.js | sort  takes the first 10 lines of commands.js then sorts them by line alphabetically.


  process.stdout.write('\nprompt > ');
  process.stdout.write(output);
//where we will store our commands
//write out data
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
}



6.

function reverseString(inputString) {
  var arr = inputString.split(' ');
  var reversed = [];
  arr.forEach((element) => {
    var subarr = element.split('');
    reversed.push(subarr.reverse().join(''));
  });
  return reversed.join(' ');
}

reverseString("Hello my name is Josh!");
